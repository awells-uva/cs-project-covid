import unittest
import os
import sys
import pandas
path = os.path.abspath(os.path.dirname(__file__))
sys.path.append(path.split("tests")[0])

import dataImporter

class dataImporterTest(unittest.TestCase):
    def setUp(self):
        self.testFrame = pandas.read_csv('datatest.csv')


    def test_subset_country(self):
        '''Test: subset_country returns correct dataframe if country in list'''
        dataframe = self.testFrame.groupby(['Country/Region']).sum().reset_index()
        
        df = dataImporter.subset_country(dataframe, 'US')
        
        refDict = {'Country/Region': {171: 'US'}, 'Lat': {171: 37.0902}, 'Long': {171: -95.7129}, '1/22/20': {171: 1}, '1/23/20': {171: 1}, '1/24/20': {171: 2}, '1/25/20': {171: 2}, '1/26/20': {171: 5}, '1/27/20': {171: 5}, '1/28/20': {171: 5}, '1/29/20': {171: 5}, '1/30/20': {171: 5}, '1/31/20': {171: 7}, '2/1/20': {171: 8}, '2/2/20': {171: 8}, '2/3/20': {171: 11}, '2/4/20': {171: 11}, '2/5/20': {171: 11}, '2/6/20': {171: 11}, '2/7/20': {171: 11}, '2/8/20': {171: 11}, '2/9/20': {171: 11}, '2/10/20': {171: 11}, '2/11/20': {171: 12}, '2/12/20': {171: 12}, '2/13/20': {171: 13}, '2/14/20': {171: 13}, '2/15/20': {171: 13}, '2/16/20': {171: 13}, '2/17/20': {171: 13}, '2/18/20': {171: 13}, '2/19/20': {171: 13}, '2/20/20': {171: 13}, '2/21/20': {171: 15}, '2/22/20': {171: 15}, '2/23/20': {171: 15}, '2/24/20': {171: 51}, '2/25/20': {171: 51}, '2/26/20': {171: 57}, '2/27/20': {171: 58}, '2/28/20': {171: 60}, '2/29/20': {171: 68}, '3/1/20': {171: 74}, '3/2/20': {171: 98}, '3/3/20': {171: 118}, '3/4/20': {171: 149}, '3/5/20': {171: 217}, '3/6/20': {171: 262}, '3/7/20': {171: 402}, '3/8/20': {171: 518}, '3/9/20': {171: 583}, '3/10/20': {171: 959}, '3/11/20': {171: 1281}, '3/12/20': {171: 1663}, '3/13/20': {171: 2179}, '3/14/20': {171: 2727}, '3/15/20': {171: 3499}, '3/16/20': {171: 4632}, '3/17/20': {171: 6421}, '3/18/20': {171: 7783}, '3/19/20': {171: 13747}, '3/20/20': {171: 19273}, '3/21/20': {171: 25600}, '3/22/20': {171: 33276}, '3/23/20': {171: 43843}, '3/24/20': {171: 53736}, '3/25/20': {171: 65778}, '3/26/20': {171: 83836}, '3/27/20': {171: 101657}, '3/28/20': {171: 121465}, '3/29/20': {171: 140909}, '3/30/20': {171: 161831}, '3/31/20': {171: 188172}, '4/1/20': {171: 213242}, '4/2/20': {171: 243622}, '4/3/20': {171: 275367}, '4/4/20': {171: 308650}, '4/5/20': {171: 336802}, '4/6/20': {171: 366317}, '4/7/20': {171: 397121}, '4/8/20': {171: 428654}, '4/9/20': {171: 462780}, '4/10/20': {171: 496535}, '4/11/20': {171: 526396}, '4/12/20': {171: 555313}, '4/13/20': {171: 580619}, '4/14/20': {171: 607670}, '4/15/20': {171: 636350}, '4/16/20': {171: 667592}, '4/17/20': {171: 699706}, '4/18/20': {171: 732197}, '4/19/20': {171: 758809}, '4/20/20': {171: 784326}, '4/21/20': {171: 811865}, '4/22/20': {171: 840351}}
        #frame = dataImporter
        self.assertTrue(refDict == df.to_dict())
        
    def test_subset_country_noCountry(self):
        '''Test: subset_country returns correct nothing if country not in list'''
        dataframe = self.testFrame.groupby(['Country/Region']).sum().reset_index()
    
        df = dataImporter.subset_country(dataframe, 'FooBar')
        
        refDict = {'Country/Region': {}, 'Lat': {}, 'Long': {}, '1/22/20': {}, '1/23/20': {}, '1/24/20': {}, '1/25/20': {}, '1/26/20': {}, '1/27/20': {}, '1/28/20': {}, '1/29/20': {}, '1/30/20': {}, '1/31/20': {}, '2/1/20': {}, '2/2/20': {}, '2/3/20': {}, '2/4/20': {}, '2/5/20': {}, '2/6/20': {}, '2/7/20': {}, '2/8/20': {}, '2/9/20': {}, '2/10/20': {}, '2/11/20': {}, '2/12/20': {}, '2/13/20': {}, '2/14/20': {}, '2/15/20': {}, '2/16/20': {}, '2/17/20': {}, '2/18/20': {}, '2/19/20': {}, '2/20/20': {}, '2/21/20': {}, '2/22/20': {}, '2/23/20': {}, '2/24/20': {}, '2/25/20': {}, '2/26/20': {}, '2/27/20': {}, '2/28/20': {}, '2/29/20': {}, '3/1/20': {}, '3/2/20': {}, '3/3/20': {}, '3/4/20': {}, '3/5/20': {}, '3/6/20': {}, '3/7/20': {}, '3/8/20': {}, '3/9/20': {}, '3/10/20': {}, '3/11/20': {}, '3/12/20': {}, '3/13/20': {}, '3/14/20': {}, '3/15/20': {}, '3/16/20': {}, '3/17/20': {}, '3/18/20': {}, '3/19/20': {}, '3/20/20': {}, '3/21/20': {}, '3/22/20': {}, '3/23/20': {}, '3/24/20': {}, '3/25/20': {}, '3/26/20': {}, '3/27/20': {}, '3/28/20': {}, '3/29/20': {}, '3/30/20': {}, '3/31/20': {}, '4/1/20': {}, '4/2/20': {}, '4/3/20': {}, '4/4/20': {}, '4/5/20': {}, '4/6/20': {}, '4/7/20': {}, '4/8/20': {}, '4/9/20': {}, '4/10/20': {}, '4/11/20': {}, '4/12/20': {}, '4/13/20': {}, '4/14/20': {}, '4/15/20': {}, '4/16/20': {}, '4/17/20': {}, '4/18/20': {}, '4/19/20': {}, '4/20/20': {}, '4/21/20': {}, '4/22/20': {}}
        
        self.assertTrue(refDict == df.to_dict())

    def test_get_latest_subset_yesterday(self):
        '''Test: get_latest_subset returns date'''

        df_subset, yesterday = dataImporter.get_latest_subset(self.testFrame, 800000)
        self.assertTrue('4/22/20' == yesterday)
        
    def test_get_latest_subset_df(self):
        '''Test: get_latest_subset returns dataframe'''

        df, yesterday = dataImporter.get_latest_subset(self.testFrame, 150000)
                
        refDict = {'Country/Region': {61: 'France', 65: 'Germany', 84: 'Italy', 156: 'Spain', 171: 'US'}, 'Lat': {61: 91.3624, 65: 51.0, 84: 43.0, 156: 40.0, 171: 37.0902}, 'Long': {61: 59.71919999999999, 65: 9.0, 84: 12.0, 156: -4.0, 171: -95.7129}, '1/22/20': {61: 0, 65: 0, 84: 0, 156: 0, 171: 1}, '1/23/20': {61: 0, 65: 0, 84: 0, 156: 0, 171: 1}, '1/24/20': {61: 2, 65: 0, 84: 0, 156: 0, 171: 2}, '1/25/20': {61: 3, 65: 0, 84: 0, 156: 0, 171: 2}, '1/26/20': {61: 3, 65: 0, 84: 0, 156: 0, 171: 5}, '1/27/20': {61: 3, 65: 1, 84: 0, 156: 0, 171: 5}, '1/28/20': {61: 4, 65: 4, 84: 0, 156: 0, 171: 5}, '1/29/20': {61: 5, 65: 4, 84: 0, 156: 0, 171: 5}, '1/30/20': {61: 5, 65: 4, 84: 0, 156: 0, 171: 5}, '1/31/20': {61: 5, 65: 5, 84: 2, 156: 0, 171: 7}, '2/1/20': {61: 6, 65: 8, 84: 2, 156: 1, 171: 8}, '2/2/20': {61: 6, 65: 10, 84: 2, 156: 1, 171: 8}, '2/3/20': {61: 6, 65: 12, 84: 2, 156: 1, 171: 11}, '2/4/20': {61: 6, 65: 12, 84: 2, 156: 1, 171: 11}, '2/5/20': {61: 6, 65: 12, 84: 2, 156: 1, 171: 11}, '2/6/20': {61: 6, 65: 12, 84: 2, 156: 1, 171: 11}, '2/7/20': {61: 6, 65: 13, 84: 3, 156: 1, 171: 11}, '2/8/20': {61: 11, 65: 13, 84: 3, 156: 1, 171: 11}, '2/9/20': {61: 11, 65: 14, 84: 3, 156: 2, 171: 11}, '2/10/20': {61: 11, 65: 14, 84: 3, 156: 2, 171: 11}, '2/11/20': {61: 11, 65: 16, 84: 3, 156: 2, 171: 12}, '2/12/20': {61: 11, 65: 16, 84: 3, 156: 2, 171: 12}, '2/13/20': {61: 11, 65: 16, 84: 3, 156: 2, 171: 13}, '2/14/20': {61: 11, 65: 16, 84: 3, 156: 2, 171: 13}, '2/15/20': {61: 12, 65: 16, 84: 3, 156: 2, 171: 13}, '2/16/20': {61: 12, 65: 16, 84: 3, 156: 2, 171: 13}, '2/17/20': {61: 12, 65: 16, 84: 3, 156: 2, 171: 13}, '2/18/20': {61: 12, 65: 16, 84: 3, 156: 2, 171: 13}, '2/19/20': {61: 12, 65: 16, 84: 3, 156: 2, 171: 13}, '2/20/20': {61: 12, 65: 16, 84: 3, 156: 2, 171: 13}, '2/21/20': {61: 12, 65: 16, 84: 20, 156: 2, 171: 15}, '2/22/20': {61: 12, 65: 16, 84: 62, 156: 2, 171: 15}, '2/23/20': {61: 12, 65: 16, 84: 155, 156: 2, 171: 15}, '2/24/20': {61: 12, 65: 16, 84: 229, 156: 2, 171: 51}, '2/25/20': {61: 14, 65: 17, 84: 322, 156: 6, 171: 51}, '2/26/20': {61: 18, 65: 27, 84: 453, 156: 13, 171: 57}, '2/27/20': {61: 38, 65: 46, 84: 655, 156: 15, 171: 58}, '2/28/20': {61: 57, 65: 48, 84: 888, 156: 32, 171: 60}, '2/29/20': {61: 100, 65: 79, 84: 1128, 156: 45, 171: 68}, '3/1/20': {61: 130, 65: 130, 84: 1694, 156: 84, 171: 74}, '3/2/20': {61: 191, 65: 159, 84: 2036, 156: 120, 171: 98}, '3/3/20': {61: 204, 65: 196, 84: 2502, 156: 165, 171: 118}, '3/4/20': {61: 288, 65: 262, 84: 3089, 156: 222, 171: 149}, '3/5/20': {61: 380, 65: 482, 84: 3858, 156: 259, 171: 217}, '3/6/20': {61: 656, 65: 670, 84: 4636, 156: 400, 171: 262}, '3/7/20': {61: 959, 65: 799, 84: 5883, 156: 500, 171: 402}, '3/8/20': {61: 1136, 65: 1040, 84: 7375, 156: 673, 171: 518}, '3/9/20': {61: 1219, 65: 1176, 84: 9172, 156: 1073, 171: 583}, '3/10/20': {61: 1794, 65: 1457, 84: 10149, 156: 1695, 171: 959}, '3/11/20': {61: 2293, 65: 1908, 84: 12462, 156: 2277, 171: 1281}, '3/12/20': {61: 2293, 65: 2078, 84: 12462, 156: 2277, 171: 1663}, '3/13/20': {61: 3681, 65: 3675, 84: 17660, 156: 5232, 171: 2179}, '3/14/20': {61: 4496, 65: 4585, 84: 21157, 156: 6391, 171: 2727}, '3/15/20': {61: 4532, 65: 5795, 84: 24747, 156: 7798, 171: 3499}, '3/16/20': {61: 6683, 65: 7272, 84: 27980, 156: 9942, 171: 4632}, '3/17/20': {61: 7715, 65: 9257, 84: 31506, 156: 11748, 171: 6421}, '3/18/20': {61: 9124, 65: 12327, 84: 35713, 156: 13910, 171: 7783}, '3/19/20': {61: 10970, 65: 15320, 84: 41035, 156: 17963, 171: 13747}, '3/20/20': {61: 12758, 65: 19848, 84: 47021, 156: 20410, 171: 19273}, '3/21/20': {61: 14463, 65: 22213, 84: 53578, 156: 25374, 171: 25600}, '3/22/20': {61: 16243, 65: 24873, 84: 59138, 156: 28768, 171: 33276}, '3/23/20': {61: 20123, 65: 29056, 84: 63927, 156: 35136, 171: 43843}, '3/24/20': {61: 22622, 65: 32986, 84: 69176, 156: 39885, 171: 53736}, '3/25/20': {61: 25600, 65: 37323, 84: 74386, 156: 49515, 171: 65778}, '3/26/20': {61: 29551, 65: 43938, 84: 80589, 156: 57786, 171: 83836}, '3/27/20': {61: 33402, 65: 50871, 84: 86498, 156: 65719, 171: 101657}, '3/28/20': {61: 38105, 65: 57695, 84: 92472, 156: 73235, 171: 121465}, '3/29/20': {61: 40708, 65: 62095, 84: 97689, 156: 80110, 171: 140909}, '3/30/20': {61: 45170, 65: 66885, 84: 101739, 156: 87956, 171: 161831}, '3/31/20': {61: 52827, 65: 71808, 84: 105792, 156: 95923, 171: 188172}, '4/1/20': {61: 57749, 65: 77872, 84: 110574, 156: 104118, 171: 213242}, '4/2/20': {61: 59929, 65: 84794, 84: 115242, 156: 112065, 171: 243622}, '4/3/20': {61: 65202, 65: 91159, 84: 119827, 156: 119199, 171: 275367}, '4/4/20': {61: 69500, 65: 96092, 84: 124632, 156: 126168, 171: 308650}, '4/5/20': {61: 71412, 65: 100123, 84: 128948, 156: 131646, 171: 336802}, '4/6/20': {61: 75343, 65: 103374, 84: 132547, 156: 136675, 171: 366317}, '4/7/20': {61: 79163, 65: 107663, 84: 135586, 156: 141942, 171: 397121}, '4/8/20': {61: 83057, 65: 113296, 84: 139422, 156: 148220, 171: 428654}, '4/9/20': {61: 87366, 65: 118181, 84: 143626, 156: 153222, 171: 462780}, '4/10/20': {61: 91738, 65: 122171, 84: 147577, 156: 158273, 171: 496535}, '4/11/20': {61: 94863, 65: 124908, 84: 152271, 156: 163027, 171: 526396}, '4/12/20': {61: 121712, 65: 127854, 84: 156363, 156: 166831, 171: 555313}, '4/13/20': {61: 125394, 65: 130072, 84: 159516, 156: 170099, 171: 580619}, '4/14/20': {61: 131361, 65: 131359, 84: 162488, 156: 172541, 171: 607670}, '4/15/20': {61: 134582, 65: 134753, 84: 165155, 156: 177644, 171: 636350}, '4/16/20': {61: 147091, 65: 137698, 84: 168941, 156: 184948, 171: 667592}, '4/17/20': {61: 149130, 65: 141397, 84: 172434, 156: 190839, 171: 699706}, '4/18/20': {61: 149149, 65: 143342, 84: 175925, 156: 191726, 171: 732197}, '4/19/20': {61: 154097, 65: 145184, 84: 178972, 156: 198674, 171: 758809}, '4/20/20': {61: 156480, 65: 147065, 84: 181228, 156: 200210, 171: 784326}, '4/21/20': {61: 159297, 65: 148291, 84: 183957, 156: 204178, 171: 811865}, '4/22/20': {61: 157125, 65: 150648, 84: 187327, 156: 208389, 171: 840351}}
        
        self.assertTrue(refDict == df.to_dict())
        
        
    def test_get_cases_confirmed_as_lists_local_dates(self):
    
        df = self.testFrame[self.testFrame["Country/Region"] == 'Canada']
        
        local_dates, cases_per_day, new_cases_per_day = dataImporter.get_cases_confirmed_as_lists(df)
       
        refList = ['1/23/20', '1/24/20', '1/25/20', '1/26/20', '1/27/20', '1/28/20', '1/29/20', '1/30/20', '1/31/20', '2/1/20', '2/2/20', '2/3/20', '2/4/20', '2/5/20', '2/6/20', '2/7/20', '2/8/20', '2/9/20', '2/10/20', '2/11/20', '2/12/20', '2/13/20', '2/14/20', '2/15/20', '2/16/20', '2/17/20', '2/18/20', '2/19/20', '2/20/20', '2/21/20', '2/22/20', '2/23/20', '2/24/20', '2/25/20', '2/26/20', '2/27/20', '2/28/20', '2/29/20', '3/1/20', '3/2/20', '3/3/20', '3/4/20', '3/5/20', '3/6/20', '3/7/20', '3/8/20', '3/9/20', '3/10/20', '3/11/20', '3/12/20', '3/13/20', '3/14/20', '3/15/20', '3/16/20', '3/17/20', '3/18/20', '3/19/20', '3/20/20', '3/21/20', '3/22/20', '3/23/20', '3/24/20', '3/25/20', '3/26/20', '3/27/20', '3/28/20', '3/29/20', '3/30/20', '3/31/20', '4/1/20', '4/2/20', '4/3/20', '4/4/20', '4/5/20', '4/6/20', '4/7/20', '4/8/20', '4/9/20', '4/10/20', '4/11/20', '4/12/20', '4/13/20', '4/14/20', '4/15/20', '4/16/20', '4/17/20', '4/18/20', '4/19/20', '4/20/20', '4/21/20', '4/22/20']
        
        self.assertTrue(refList == list(local_dates))
        
        
    def test_get_cases_confirmed_as_lists_cases_per_day(self):
             
        df = self.testFrame[self.testFrame["Country/Region"] == 'Canada']
                 
        local_dates, cases_per_day, new_cases_per_day = dataImporter.get_cases_confirmed_as_lists(df)

        self.assertTrue(cases_per_day == [0, 0, 0, 1, 1, 2, 2, 2, 4, 4, 4, 4, 4, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 11, 11, 13, 14, 20, 24, 27, 30, 33, 37, 49, 54, 64, 77, 79, 108, 117, 193, 198, 252, 415, 478, 657, 800, 943, 1277, 1469, 2088, 2790, 3251, 4042, 4682, 5576, 6280, 7398, 8527, 9560, 11284, 12437, 12978, 15756, 16563, 17872, 19141, 20654, 22059, 23316, 24298, 25679, 27034, 28208, 30808, 32813, 34355, 35632, 37657, 39401, 41648])
        
    def test_get_cases_confirmed_as_lists_new_cases_per_day(self):
        
        df = self.testFrame[self.testFrame["Country/Region"] == 'Canada']
            
        local_dates, cases_per_day, new_cases_per_day = dataImporter.get_cases_confirmed_as_lists(df)
   
        self.assertTrue(new_cases_per_day == [0, 0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 2, 1, 6, 4, 3, 3, 3, 4, 12, 5, 10, 13, 2, 29, 9, 76, 5, 54, 163, 63, 179, 143, 143, 334, 192, 619, 702, 461, 791, 640, 894, 704, 1118, 1129, 1033, 1724, 1153, 541, 2778, 807, 1309, 1269, 1513, 1405, 1257, 982, 1381, 1355, 1174, 2600, 2005, 1542, 1277, 2025, 1744, 2247])
            
if __name__ == '__main__':
    unittest.main()
